import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:just_audio/just_audio.dart';

class SoundSelector extends StatefulWidget {
  final String currentSound;
  final ValueChanged<String> onSoundSelected;

  const SoundSelector({
    super.key,
    required this.currentSound,
    required this.onSoundSelected,
  });

  @override
  State<SoundSelector> createState() => _SoundSelectorState();
}

class _SoundSelectorState extends State<SoundSelector> {
  late AudioPlayer _audioPlayer;
  String? _currentlyPlaying;
  
  final List<SoundOption> _sounds = [
    SoundOption('default', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô', Icons.volume_up),
    SoundOption('bell', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏Ü‡∏±‡∏á', Icons.notifications),
    SoundOption('chime', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏¥‡πà‡∏á', Icons.music_note),
    SoundOption('ding', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏¥‡∏á', Icons.campaign),
    SoundOption('gentle', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏•', Icons.volume_down),
    SoundOption('alert', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', Icons.warning),
    SoundOption('custom', '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á', Icons.folder_open),
  ];

  @override
  void initState() {
    super.initState();
    _audioPlayer = AudioPlayer();
  }

  @override
  void dispose() {
    _audioPlayer.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      constraints: BoxConstraints(
        maxHeight: MediaQuery.of(context).size.height * 0.8,
      ),
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          // Header
          Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
                  style: Theme.of(context).textTheme.titleLarge,
                ),
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                ),
              ],
            ),
          ),
          
          // Scrollable sound list
          Flexible(
            child: ListView.builder(
              shrinkWrap: true,
              itemCount: _sounds.length,
              itemBuilder: (context, index) => _buildSoundTile(_sounds[index]),
            ),
          ),
          
          const SizedBox(height: 16),
        ],
      ),
    );
  }

  Widget _buildSoundTile(SoundOption sound) {
    final isSelected = widget.currentSound == sound.key;
    
    return ListTile(
      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
      leading: Icon(sound.icon),
      title: Text(sound.name),
      trailing: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          IconButton(
            icon: Icon(
              _currentlyPlaying == sound.key
                  ? Icons.stop
                  : Icons.play_arrow,
            ),
            onPressed: () => _previewSound(sound.key),
            tooltip: _currentlyPlaying == sound.key ? '‡∏´‡∏¢‡∏∏‡∏î' : '‡∏ü‡∏±‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á',
            visualDensity: VisualDensity.compact,
          ),
          Radio<String>(
            value: sound.key,
            groupValue: widget.currentSound,
            onChanged: (value) {
              if (value != null) {
                widget.onSoundSelected(value);
              }
            },
            visualDensity: VisualDensity.compact,
          ),
        ],
      ),
      selected: isSelected,
      onTap: () {
        if (sound.key == 'custom') {
          _selectCustomSound();
        } else {
          widget.onSoundSelected(sound.key);
        }
      },
    );
  }

  void _previewSound(String soundKey) async {
    try {
      // If currently playing this sound, stop it
      if (_currentlyPlaying == soundKey) {
        setState(() {
          _currentlyPlaying = null;
        });
        return;
      }

      // Stop any currently playing sound
      if (_currentlyPlaying != null) {
        setState(() {
          _currentlyPlaying = null;
        });
      }

      setState(() {
        _currentlyPlaying = soundKey;
      });

      // ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      await _playSpecificSound(soundKey);

      // Show preview message
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('üîî ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${_getSoundName(soundKey)}'),
            duration: const Duration(seconds: 2),
            backgroundColor: Colors.green,
          ),
        );
      }

      // Auto-stop after 2 seconds
      Future.delayed(const Duration(seconds: 2), () {
        if (_currentlyPlaying == soundKey && mounted) {
          setState(() {
            _currentlyPlaying = null;
          });
        }
      });

    } catch (e) {
      // Fallback ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á system
      SystemSound.play(SystemSoundType.alert);
      HapticFeedback.mediumImpact();
      
      setState(() {
        _currentlyPlaying = null;
      });
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('üîî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ${_getSoundName(soundKey)} (Fallback)'),
            backgroundColor: Colors.orange,
          ),
        );
      }
    }
  }

  Future<void> _playSpecificSound(String soundKey) async {
    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ notification ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ú‡πà‡∏≤‡∏ô SystemSound patterns
    switch (soundKey) {
      case 'bell':
        // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏£‡∏∞‡∏Ü‡∏±‡∏á - click ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        SystemSound.play(SystemSoundType.click);
        HapticFeedback.lightImpact();
        break;
        
      case 'chime':
        // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏¥‡πà‡∏á - click 2 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        SystemSound.play(SystemSoundType.click);
        await Future.delayed(const Duration(milliseconds: 300));
        SystemSound.play(SystemSoundType.click);
        HapticFeedback.lightImpact();
        break;
        
      case 'ding':
        // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏¥‡∏á - alert sound
        SystemSound.play(SystemSoundType.alert);
        HapticFeedback.mediumImpact();
        break;
        
      case 'gentle':
        // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ô‡∏∏‡πà‡∏°‡∏ô‡∏ß‡∏• - click ‡πÄ‡∏ö‡∏≤
        SystemSound.play(SystemSoundType.click);
        HapticFeedback.lightImpact();
        break;
        
      case 'alert':
        // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô - alert + vibration pattern
        SystemSound.play(SystemSoundType.alert);
        HapticFeedback.heavyImpact();
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏ô‡∏ã‡πâ‡∏≥
        Future.delayed(const Duration(milliseconds: 500), () {
          HapticFeedback.heavyImpact();
        });
        break;
        
      default: // 'default'
        // ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - alert standard
        SystemSound.play(SystemSoundType.alert);
        HapticFeedback.mediumImpact();
        break;
    }
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï: ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏à‡∏£‡∏¥‡∏á ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:
    // await _audioPlayer.setAsset('assets/sounds/${soundKey}.mp3');
    // await _audioPlayer.play();
  }

  void _selectCustomSound() {
    // TODO: Implement custom sound file picker
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ'),
      ),
    );
  }

  String _getSoundName(String soundKey) {
    return _sounds.firstWhere(
      (sound) => sound.key == soundKey,
      orElse: () => SoundOption(soundKey, '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', Icons.help),
    ).name;
  }
}

class SoundOption {
  final String key;
  final String name;
  final IconData icon;

  const SoundOption(this.key, this.name, this.icon);
}